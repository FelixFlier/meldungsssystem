# Meldungssystem

Ein modernes System zur Erfassung und Bearbeitung von Vorfällen wie Diebstahl und Sachbeschädigung.

## Projektübersicht

Das Meldungssystem ermöglicht Benutzern die Erfassung und Verfolgung von Vorfallsmeldungen. Mit einer modernen Weboberfläche, sicherer Benutzerauthentifizierung und automatisierten Prozessen durch Software-Agenten bietet es eine komplette Lösung für die Meldung von Vorfällen.

## Architektur

Das Projekt verwendet eine moderne Architektur:

- **Backend**: FastAPI (Python) mit SQLAlchemy ORM
- **Frontend**: HTML, CSS (Tailwind), JavaScript (ES6 Module)
- **Automatisierung**: Selenium-Agenten für Formularausfüllung
- **Datenbank**: SQLite (Entwicklung), PostgreSQL (Produktion)
- **Deployment**: Docker und Docker Compose

## Verzeichnisstruktur

```
meldungssystem/
├── agents/                       # Automatisierungs-Agenten
├── migrations/                   # Alembic Datenbank-Migrationen
├── routes/                       # API-Routen
├── services/                     # Dienste (Agent-Service, etc.)
├── static/                       # Statische Dateien (Frontend)
│   ├── css/
│   ├── js/
│   │   └── modules/              # JavaScript-Module
│   └── img/
├── templates/                    # Jinja2-Templates (falls benötigt)
├── tests/                        # Unit- und Integrationstests
└── utils/                        # Hilfsfunktionen
```

## Kernkomponenten

### Backend (Python/FastAPI)

#### Hauptmodule

| Datei | Beschreibung |
|-------|-------------|
| `main.py` | Hauptanwendungseinstiegspunkt. Initialisiert FastAPI, Middleware, Routen und statische Dateiauslieferung. |
| `config.py` | Konfigurationsmanagement mit Pydantic Settings. Lädt Konfiguration aus Umgebungsvariablen. |
| `database.py` | Datenbankverbindung und ORM-Setup mit SQLAlchemy 2.0 (mit Async-Support). |
| `models.py` | SQLAlchemy-Modelle für User, Incident und AuditLog. |
| `schemas.py` | Pydantic-Schemas für Datenvalidierung und Serialisierung. |
| `security.py` | Authentifizierungs- und Autorisierungsdienstprogramme, inkl. JWT-Token-Verarbeitung. |
| `middleware.py` | Individuelle Middleware für Security-Header, Request-Logging und Rate-Limiting. |
| `crud.py` | CRUD-Operationen für Datenbankmodelle (mit Sync- und Async-Versionen). |
| `log_config.py` | Konfiguration des Loggingsystems mit Datei- und Konsolenausgabe. |

#### Routes

| Datei | Beschreibung |
|-------|-------------|
| `auth.py` | Authentifizierungsrouten für Login und CSRF-Token. |
| `users.py` | Benutzerrouten für Kontoerstellung und Profilmanagement. |
| `incidents.py` | Vorfallsrouten zum Erstellen und Abrufen von Vorfallsberichten. |
| `health.py` | Gesundheitscheck und Systeminformationsrouten. |

#### Agents

| Datei | Beschreibung |
|-------|-------------|
| `base_agent.py` | Basis-Agent mit gemeinsamer Funktionalität für alle speziellen Agenten. |
| `diebstahl_agent.py` | Spezialisierter Agent für Diebstahlsberichte. |
| `sachbeschaedigung_agent.py` | Spezialisierter Agent für Sachbeschädigungsberichte. |

#### Services

| Datei | Beschreibung |
|-------|-------------|
| `agent_service.py` | Dienst zum Ausführen von Agenten-Tasks im Hintergrund. |

### Frontend

#### HTML und CSS

| Datei | Beschreibung |
|-------|-------------|
| `static/index.html` | Haupt-HTML-Datei für die Single-Page-Anwendung. |
| `static/css/animations.css` | CSS-Animationen und -Übergänge. |
| `static/css/components.css` | CSS für UI-Komponenten wie Buttons, Karten, Modals. |

#### JavaScript

| Datei | Beschreibung |
|-------|-------------|
| `static/js/main.js` | Haupteinstiegspunkt für Frontend-Code. Initialisiert Module und Event-Handler. |
| `static/js/modules/animations.js` | Visuelle Effekte wie Sternenhimmel, Animationen und Übergänge. |
| `static/js/modules/api.js` | API-Client für die Kommunikation mit dem Backend. |
| `static/js/modules/auth.js` | Authentifizierungslogik (Login, Logout, Sitzungsverwaltung). |
| `static/js/modules/forms.js` | Formularverarbeitung, Validierung und Dateiuploads. |
| `static/js/modules/incidents.js` | Vorfallsmanagement-Funktionalität. |
| `static/js/modules/ui.js` | UI-Dienstprogramme für Modals, Toasts usw. |
| `static/js/modules/emergency-login.js` | Notfallanmeldefunktionalität. |
| `static/sw.js` | Service Worker für Offline-Unterstützung. |

## Konfiguration

Die Konfiguration wird aus Umgebungsvariablen oder einer .env-Datei geladen:

```env
# Anwendungseinstellungen
APP_NAME=Meldungssystem
APP_VERSION=1.0.0
DEBUG=True

# Datenbankeinstellungen für SQLite
DATABASE_URL=sqlite:///./users.db

# Sicherheitseinstellungen
SECRET_KEY=your_very_complex_secret_key_at_least_32_characters_long
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# CORS-Einstellungen
CORS_ORIGINS=["*"]

# Selenium-Einstellungen
SELENIUM_HEADLESS=False

# Log-Einstellungen
LOG_LEVEL=INFO
LOG_FILE=app.log
```

## API-Endpunkte

Das Meldungssystem bietet folgende Hauptendpunkte:

### Authentifizierung

- `GET /csrf-token`: CSRF-Token für Formulare abrufen
- `POST /token`: Anmeldung und Token-Generierung

### Benutzer

- `POST /users/`: Neuen Benutzer erstellen
- `GET /users/me/`: Eigenes Profil abrufen
- `PUT /users/me/`: Eigenes Profil aktualisieren
- `GET /users/{user_id}`: Benutzer nach ID abrufen (nur eigenes Profil)

### Vorfälle

- `POST /incidents/`: Neuen Vorfall erstellen
- `GET /incidents/`: Alle eigenen Vorfälle abrufen
- `GET /incidents/{incident_id}`: Vorfall nach ID abrufen
- `PATCH /incidents/{incident_id}`: Vorfallsstatus aktualisieren

### System

- `GET /health`: Systemzustand prüfen
- `GET /api/auth-status`: Authentifizierungsstatus prüfen
- `GET /api/activities`: Benutzeraktivitäten abrufen

## Automatisierte Agenten

Das System verwendet Selenium-basierte Agenten, um Vorfälle automatisch bei externen Systemen zu melden:

- **Diebstahl-Agent**: Füllt Online-Formulare für Diebstahlsberichte aus
- **Sachbeschädigungs-Agent**: Füllt Online-Formulare für Sachbeschädigungsberichte aus

Die Agenten werden als Hintergrundaufgaben ausgeführt und aktualisieren den Vorfallsstatus nach Abschluss.

## Installationsanleitung

### Entwicklungsumgebung

1. Repository klonen:
   ```bash
   git clone https://github.com/yourusername/meldungssystem.git
   cd meldungssystem
   ```

2. Virtuelle Umgebung erstellen:
   ```bash
   python -m venv venv
   source venv/bin/activate  # Unter Windows: venv\Scripts\activate
   ```

3. Abhängigkeiten installieren:
   ```bash
   pip install -r requirements.txt
   ```

4. .env-Datei erstellen:
   ```bash
   cp .env.example .env
   # Bearbeiten Sie die .env-Datei mit Ihren Einstellungen
   ```

5. Datenbank initialisieren:
   ```bash
   alembic upgrade head
   ```

6. Anwendung starten:
   ```bash
   uvicorn main:app --reload
   ```

### Produktion mit Docker

1. Docker-Image bauen:
   ```bash
   docker build -t meldungssystem .
   ```

2. Container starten:
   ```bash
   docker run -p 8000:8000 meldungssystem
   ```

Oder mit Docker Compose:
```bash
docker-compose up -d
```

## Funktionalitäten

- **Benutzerregistrierung und -authentifizierung**: Sichere Kontoverwaltung
- **Vorfallsmeldungen**: Erfassung von Diebstahl und Sachbeschädigung
- **Automatisierte Berichtsübermittlung**: Verwendung von Selenium-Agenten
- **Auditprotokollierung**: Tracking für Sicherheitsereignisse
- **Responsive UI**: Modernes Design mit Tailwind CSS
- **Service Worker**: Unterstützung für Offline-Funktionalität

## Architektonische Entscheidungen

- **Async/Sync-Hybrid**: Das Backend verwendet sowohl synchrone als auch asynchrone Datenbankoperationen, um die Migration zu SQLAlchemy 2.0 zu erleichtern.
- **Modularer JavaScript-Ansatz**: ES6-Module für bessere Codeorganisation.
- **Background-Tasks**: Verwendung von FastAPI's Background Tasks für die Agentenausführung.
- **Containerisierung**: Docker für konsistente Entwicklungs- und Produktionsumgebungen.

## Lizenz

Copyright (c) 2025 Ihre Organisation. Alle Rechte vorbehalten.